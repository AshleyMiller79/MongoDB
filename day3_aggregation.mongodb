
////==================================================================================
////                                  AGGREGATION
////==================================================================================
// 1) Aggregation, dokumanlardaki verilerin islenmesi ve hesaplanan 
//    sonuclarin donmesini saglayan islemlerdir. 
//
// 2) Aggregation islemleri, farklı dokumanlardaki degerleri gruplandirabilir.
//
// 3) Bu gruplanan veriler uzerinde cesitli islemlerin gereceklestirelerek tek 
//    bir sonuc degerinin donmesi saglanabilir.
//
//  4) MongoDB, 3 farklı yontem ile aggregation gerceklestirmeye izin verir.
//     A) aggregation pipeline (toplama boru hattı)
//     B) map-reduce function (map indirgeme)
//     C) single-purpose aggregation (tek-amaç toplama)
//
//  5) Aggregiation, SQL'deki Join islemlerine benzetilebilir. 
//
//     SQL         MONGO
//----------------------
//     WHERE       $match
//     GROUP BY 	 $group
//     HAVING	     $match
//     SELECT	     $project
//     ORDER BY    $sort
//     LIMIT	     $limit
//     SUM()	     $sum
//     COUNT()	   $count, $sum
//     JOIN	       $lookup
//     MERGE 	     $merge (MongoDB 4.2 ve sonrasi)
////aggregation (sum,max,avg vs) yaparken bi field (column) kullanacaksak syntax ı ==> "$urunAdi" şeklinde===================================================================

///==================================================================================
////                          AGGREGATION PIPELINE
////==================================================================================
// SYNTAX
// 
//   pipeline = [
 //   { $match : { … },
 //   { $group : { … },
 //   { $sort : { … },
//      ...
//   ]
//   db.collectionName.aggregate(pipeline, options)
//
//  $match() – Verileri secerken flitrelemek icin
//  $group({_id : "$field"}) - islenen verilerin grupplanmasi icin 
//  $sort()  Sonuclarin siralanmasi icin

////---------------------------------------------------------------------------------
//// 1) "KISILER" veritabaninda "ogrenciler" collection'i tanimlayalim. 
////---------------------------------------------------------------------------------

use("KISILER")
//db.ogrenciler.find()
//  db.people.drop();
 //db.createCollection("ogrenciler")
// use("kisiler");
// db.createCollection("ogrenciler");

// //---------------------------------------------------------------------------------
// // 2) asagidaki dokumanlari collection'a kaydedelim.   
// //---------------------------------------------------------------------------------
db.ogrenciler.insertMany([
{"isim": "Tarik ", "yas":57, "sube": "A", "not":97, "dersler":["fizik", "mat"]}, 
{"isim": "Selim", "yas":37, "sube": "A","not":77,},
{"isim": "Nalan", "yas":17, "sube": "B","not":55, "dersler":["fizik", "ingilizce"]},
{"isim": "Burhan", "yas":21, "sube": "B","not":43, "dersler":["fizik", "mat"]},
{"isim": "Niyazi", "yas":40, "sube": "B","not":99, "dersler":["ingilizce"]},
{"isim": "Galip", "yas":37, "sube": "A","not":34, "dersler":["ingilizce"]},
{"isim": "Teslime", "yas":24, "sube": "A","not":88, "dersler":["mat","fizik","kimya"]}]);

///---------------------------------------------------------------------------------
//// 3) yasi 30'dan buyuk olan ogrencileri sorguyulayiniz.   
////---------------------------------------------------------------------------------
 //db.ogrenciler.aggregate({$match:{yas : {$gt:30}}});
// find ile de çözülür
//db.ogrenciler.find({yas: {$gt:30}})
// ////---------------------------------------------------------------------------------
// //// 4) dersler i ingilizce yasi 50'dan kucuk olan ogrencileri sorgulayiniz.   
// ////---------------------------------------------------------------------------------
use("KISILER");
 db.ogrenciler.aggregate({$match: {dersler:["ingilizce"], yas: {$lt:50}}})
 //db.ogrenciler.find( {dersler:["ingilizce"], yas: {$lt:50}})

////---------------------------------------------------------------------------------
//// 5) B-subesindeki ogrenci sayisini hesaplayan sorguyu yaziniz. NOT: SAYMAK icin 
////    $match icerisinde $count metodu kullanilabilir. 
////---------------------------------------------------------------------------------
use("KISILER")
 db.ogrenciler.aggregate( {$match: {sube:"B"}}, {$count:"B-Subesi Ogrenci Sayisi"} );

// NOT:Sadece saymak icin dogrudan db.colection.count() metoduda kullanilabilir.
//     Bu yonteme single-purpose aggregation metotlari denilmektir. 
//     Ancak bu islem aggregetion'daki gibi sorgu cevabi dondurmez. Sadece hesaplanan
//     sonucu dondurur.tırnak içinde yazı ("B-Subesi Ogrenci Sayisi") yazamayız
use("KISILER")
db.ogrenciler.count( {sube: "B"});

OT: Gruplandirirak saymak icin (sadece buraya özel) $sum:1 kullanilabilir. $sum:1, eslesen
////    he////---------------------------------------------------------------------------------
//// 6) Tum subelerdeki toplam ogrenci sayisini hesaplayan sorguyu yaziniz.
////    Nr bir grup icin 1 sayisinin donmesini ve bunlarin toplanmasini saglar.
// count:tek sonuç ,mesela B sınıfındaki.....ler..
// sum:A daki...ler, B deki...ler birer birer toplanır
////---------------------------------------------------------------------------------
 ////    NOT: Group isleminde degiskenlerin onune $ isareti konulmalidir.
 //  id den sonra dersler, not vs de olabilir, 
 //burada şubeye göre grupla=$group:{_id:"$sube"}}
         use("KISILER")
         //db.ogrenciler.aggregate ({$group:{_id: "$sube"}},{$count:"toplam öğrenci"
         //==>bu yanlış yazım, subeleri sayar, cevap olarak 2 yazdırır, 2 sube var der

         
 db.ogrenciler.aggregate ({$group:{_id: "$sube", toplamOgrenci: {$sum: 1}}});
 
 //sum:1 mesela A daki öğrencileri 1 er 1 er sayıp toplar. burada 1 yerine $not yazarsak alttaki soru gibi A daki notları kendi arasında B dekileri kendi arasında not ları toplar. count sum gibi metodlarda ön bilgi şart

////---------------------------------------------------------------------------------
//// 7) Tum subelerdeki toplam ogrenci sayilarini ve her subedeki maks notu hesaplayan 
////    sorguyu yaziniz.

////----------------------------------------------------------------------------------
use("KISILER")
var pipeline ={$group:{_id:"$sube", toplamOgrenci:{$sum:1}, maksNot:{$max:"$not"}}}
db.ogrenciler.aggregate(pipeline);

//---------------------------------------------------------------------------------
//// 8) yasi 30'Dan kucuk olanlarin subelere gore not ortalamalarini hesaplayan 
////    sorguyu yaziniz.
////---------------------------------------------------------------------------------
use("KISILER")
db.ogrenciler.aggregate([ {$match:{yas :{$lt:30}}},{$group: {_id:"$sube",ortalamaNot: {$avg: "$not"}}}
]);

////---------------------------------------------------------------------------------
//// 9) inglizce dersini alanlarin subelere gore sayilari hesaplayan sorguyu yaziniz.
////---------------------------------------------------------------------------------
//ingilizceyi köşeli içine alırsam sadece ingilizce yazanı getirir [ingilizce]
use("KISILER")
db.ogrenciler.aggregate([
    {$match:{dersler: "ingilizce"}},
    {$group:{_id:"$sube", IngAlanlarinSayisi:{$sum:1}}}
]);

////---------------------------------------------------------------------------------
//// 10) sadece Fizik ve Mat dersini alanlarin subelere gore sayilari hesaplayan sorguyu yaziniz.
////---------------------------------------------------------------------------------
use("KISILER")
db.ogrenciler.aggregate([
    {$match:{dersler: ["fizik", "mat"]}},
    {$group:{_id:"$sube", FizMatAlanlarinSayisi:{$sum:1}}}
]);
//fizik veya matematik alanlar
use("KISILER");

db.ogrenciler.aggregate([ {$match:{dersler:  {$in:["fizik", "mat"]}}},    {$group:{_id:"$sube", FizVeyaMatAlanlarinSayisi:{$sum:1}}}
]);




////---------------------------------------------------------------------------------
//// 11) A subesindeki ogrencileri yasa gore azalan sirada, nota gore yukselen sirada
////     siralayiniz.
////---------------------------------------------------------------------------------
use("KISILER");
db.ogrenciler.aggregate([{$match:{sube:"A"}}, {$sort:{yas:-1, not:1}}]);
//diğer yol sort için
db.ogrenciler.aggregate({$match:{sube:"A"}}).sort({"yas":-1,not:1})
//---------------------------------------------------------------------------------
//// 12) MEDYA veritabanı altında hesaplar ismiyle yeni bir collection olusturunuz
//       ve degerleri girginiz.
////---------------------------------------------------------------------------------
use("MEDYA")
db.hesaplar.insertMany(
[{"isim" : "ali", "harcamalar":[-80, -40, -50, -120], "kazanc":[100, 150]},
{"isim" : "Can", "harcamalar" : [-60, -30, -20], "kazanc" : [200, 50, 130] },
{"isim" : "Canan", "harcamalar" : [-80, -40, -50], "kazanc" : [300, 450] },
{"isim" : "Betul", "harcamalar" : [-80, -120], "kazanc" : [500, 50, 70, 10] },
{"isim" : "Ahsen", "harcamalar" : [-140, -50, -120], "kazanc" : [400] },
{"isim" : "Su", "harcamalar" : [-120], "kazanc" : [22, 375, 65] },
{"isim" : "Pelin", "harcamalar" : [-180, -40, -70, -12], "kazanc" : [500, 650, 400]}]); 

////---------------------------------------------------------------------------------
//// 13) var olan dokumanlarda her kisi icin toplam harcama, toplam kazanc ve  
////     bakiye degerlerini hesaplayarak dokumana ekleyen sorguyu yaziniz.
////     bakiye'ye gore siralayiniz.
////     NOT: Sorguda olmayan bir field icin $addFields metodu kullanilabilir. project lede yeni field ekleniyor , join classında görücez ama. dizilerde buradaki şekilde olur
////---------------------------------------------------------------------------------
use("MEDYA");
 pipeline1 = [
   {$addFields :{toplamHarcama: {$sum: "$harcamalar"}, toplamKazanc: {$sum: "$kazanc"}}} ,
   {$addFields:{bakiye:{$add:["$toplamHarcama" ,"$toplamKazanc"]}}},
   {$sort:{bakiye:-1}},
   {$project:{"harcamalar": 0, kazanc: 0, _id:0}}
 ]
 db.hesaplar.aggregate(pipeline1);//.sort({bakiye:-1})  buraya da eklenebilir
 //görünmesini istediklerime 1 yazsamda olur
//bunlar mongo da gözükmez anlık sorgu yapıyoruz
 //alttaki çözüm joın classından sonra akla gelebilir, ama bu fields eklemekten çok, gözükmesini istediklerini yaz demek gibi oluyor, project in mantığı bu zaten
// {$project :{toplamHarcama: {$sum: "$harcamalar"}, toplamKazanc: {$sum: "$kazanc"}}} ,
//    {$project:{bakiye:{$add:["$toplamHarcama" ,"$toplamKazanc"]}}},
//    {$sort:{bakiye:-1}},
//    {$project:{"harcamalar": 0, kazanc: 0, _id:0}}
 

 
////---------------------------------------------------------------------------------
//// 14) hesaplar collection'nin muhasabe adinda bir kopyasini olusturalim.
////---------------------------------------------------------------------------------
use("MEDYA")
 db.hesaplar.aggregate({$project:{_id:0}}, {$merge: {into:"muhasabe"}});
//id:0 kapatmasaydım eski id lerle kopya oluşturacaktı, şimdi default verecek
////---------------------------------------------------------------------------------
//// 15) hesaplar collection'nindan harcamalar kismini cikararak kazanclar adinda 
////     yeni bir kopyasini olusturalim.
// ////---------------------------------------------------------------------------------
use("MEDYA")
 db.hesaplar.aggregate({$project: {harcamalar:0, _id:0}}, {$merge: {into:"kazanclar"}});


////==================================================================================
////                                  BULKWRITE (toplu yazmak)
////  Birden fazla islemi ayni komutla gerceklestirmek icin BulkWrite kullanilabilir.
// https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite/
// db.collections.bulkWrite([
//       {insertOne:{"document": {yazar: "........", fiyat:....., yayinYili : ...... }}},
//   {updateOne:{"filter":{yazar: "......"}, "update": {$set: {fiyat:.......}}}},
//   {replaceOne:{"filter":{yazar:"......."}, "replacement": {yazar: "......", fiyat:.....}}},
//   {deleteOne:{"filter" : {yazar: "........."}}}
//    ]);
//==================================================================================
use("MEDYA");
db.hikayeler.insertMany(
[{"yazar" : "Mehmet Bak", "fiyat" : 60, "yayinYili" : 1998 },
{"yazar" : "Ali Gel", "fiyat" : 75, "yayinYili" : 2000 },
{"yazar" : "Su Ak", "fiyat" : 90, "yayinYili" : 2005 },
{"yazar" : "İsmet Kaç", "fiyat" : 35, "yayinYili" : 2010 },
{"yazar" : "Pelin Su", "fiyat" : 80, "yayinYili" : 2020 },
{"yazar" : "Suat Ok", "fiyat" : 54, "yayinYili" : 2001}]);

use("MEDYA")

db.hikayeler.bulkWrite([
  {insertOne:{"document": {yazar: "Selim Genc", fiyat: 77, yayinYili : 2021 }}},
  {updateOne:{"filter":{yazar: "Ali Gel"}, "update": {$set: {fiyat:99}}}},
  {replaceOne:{"filter":{yazar:"Pelin Su"}, "replacement": {yazar: "Ceylan Kaya", fiyat:55}}},
  {deleteOne:{"filter" : {yazar: "Suat Ok"}}}
]);
