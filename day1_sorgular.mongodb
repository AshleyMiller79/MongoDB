////=================================================================
////                      SORGULAR (QUERIES) https://docs.mongodb.com/manual/reference/operator/query-comparison/      adresine bakabilirler

////=================================================================


////-----------------------------------------------------------------
//// 1) "urunler" adinda bir veritabani ve icerisinde "fiyatlar" 
//// adinda bir collection tanimlayalim.  
////-----------------------------------------------------------------
use("urunler");
// db.fiyatlar.drop()
// db.createCollection("fiyatlar");

////-----------------------------------------------------------------
//// 2) asagidaki dokumanlari collection'a kaydedelim ve listeleyelim.  
////-----------------------------------------------------------------
db.fiyatlar.insertMany([
{"urunAdi":"TV", "fiyat": 5000, "vergi": 10 ,"summary":[{"version":1},{"show":"yok"}]},
{"urunAdi":"Telefon", "fiyat": 3500, "vergi": 20 },
{"urunAdi":"Utu", "fiyat": 1500, "vergi": 5 },
{"urunAdi":"Buzdolabi", "fiyat": 4000, "vergi": 10 } ] ); 

// db.fiyatlar.find();

////-----------------------------------------------------------------
//// 3) ilk üc dokumani sorgulayalim --- limit() metodu
////-----------------------------------------------------------------
use("urunler")
db.fiyatlar.find().limit(3);

////-----------------------------------------------------------------
//// 4) Sadece 2. ve 3. dokumanlari sorgulayalim   
////-----------------------------------------------------------------
use("urunler")
db.fiyatlar.find().skip(1).limit(2);

////-----------------------------------------------------------------
//// 5) Birinci dokumani sorgulayalim   
////-----------------------------------------------------------------
use("urunler")
db.fiyatlar.find().limit(1);
use("urunler")
db.fiyatlar.findOne();

////=================================================================
////       LOGICAL QUERY OPERATOR (mantıksal sorgu) ($and ,$or, $not,$nor)
////
//// SYNTAX: { $and: [ {ifade1}, {ifade2} , ... , {ifadeN} ] }
////         { field: { $not: { <operator-ifade> } } }  ==> ( {"vergi": {$not: {$eq:10}}});
////=================================================================

////-----------------------------------------------------------------
//// 5) Collection asagidaki dokumani ekleyelim.    
// ////-----------------------------------------------------------------
use("urunler")
db.fiyatlar.insertOne({"urunAdi":"Koltuk", "fiyat": 5000, "vergi": 10});
db.fiyatlar.find();


////-----------------------------------------------------------------
//// 6) fiyat=5000 olan ve urunAdi="TV" olan dokumanlari listeleyiniz. 
////-----------------------------------------------------------------
use("urunler")
db.fiyatlar.find( {$and: [{"fiyat":5000}, {"urunAdi":"TV"}]});

////-----------------------------------------------------------------
//// 7) urunAdi="Utu" olan veya vergi=10 olan dokumanlari listeleyiniz      
////-----------------------------------------------------------------
db.fiyatlar.find({$or : [{"urunAdi" :"Utu"}, {"vergi":10}]});

////-----------------------------------------------------------------
//// 8) fiyat=5000 olan urunleri listeleyiniz.     
////-----------------------------------------------------------------
 db.fiyatlar.find({ "fiyat": 5000 });
use("urunler");
db.fiyatlar.find({"fiyat": {$eq: 5000},$comment: "Find even values."});
//yorum ekleyebilirsiniz üstteki gibi ama burada gözükür
////-----------------------------------------------------------------
//// 9) vergi=10 olmayan dokumanlari listeleyiniz 
///------------------------------------------------------------------
use("urunler")
db.fiyatlar.find( {"vergi": {$not: {$eq:10}}});

//kısa yolu var ilerde=> db.fiyatlar.find( {"vergi": {$eq:10}});

////-----------------------------------------------------------------
//// 10) (urunAdi= TV ve vergi=10) olmayan dokumanlari listeleyiniz 
////-----------------------------------------------------------------
use("URUNLER")
db.fiyatlar.find( {$nor: [{"urunAdi":"TV"},{"vergi":10}]});
use("URUNLER");
db.fiyatlar.find({$not:{ {$and:[{urunAdi:"TV"}, {vergi:10}]}}});
use("URUNLER");
db.fiyatlar.find({$and:[{urunAdi: {$not:{$eq:"TV"} }}, {vergi:{$not:{$eq:10}}}]});
use("URUNLER");
db.fiyatlar.find( {$nor :[{urunAdi:"TV"}, {vergi:10}]}); (edited) 
////-----------------------------------------------------------------
//// 11) urunAdi=TV olan kayitlarin sadece fiyat'ini listeleyiniz.
////     (Bu isleme Projection denilmektedir)
//// Projection'da gosterilmek istenen Field'a 1 degeri atanir Ornegin: 
//// {"fiyat":1}, gosterilmek istenmeyenler ise yazilmaz. 
//// Sadece _id icin bir istisna vardir.  onu istemiyorsak 0 ile belirticez
////
// //// SYNTAX   db.collection.find( {query}, {projection}). aynı kişinin fiyatını id sini istediği için aynı parantez, süslünün biri filtreleme şartları  için, biri göstermek istediğimiz field lar için
////-----------------------------------------------------------------
use("urunler")
 db.fiyatlar.find({"urunAdi":"TV"}, {"fiyat":1, "urunAdi":1,"_id":0,"summary.version":1});

//-----------------------------------------------------------------
// 11) Tum dokumanlarin sadece fiyat ve urunAdini listeleyiniz.
//-----------------------------------------------------------------    
db.fiyatlar.find({}, {"fiyat":1,"_id":0});

////-----------------------------------------------------------------
//// 12) urunAdi=Buzdolabi olan kayitlarin sadece urunAdi ve fiyatini 
////  listeleyiniz.
////-----------------------------------------------------------------
db.fiyatlar.find( {"urunAdi":"Buzdolabi"}, {"urunAdi":1, "fiyat":1 } );

////=================================================================
////                    COMPARAISON (karşılaştırma) OPERATOR 
//// $eq : esit mi
//// $lt : kücük mü  (less than)
//// $gt : buyuk mu (greater than)
//// $lte: kucuk esit mi
//// $gte: buyuk esit mi
//// $ne : esit degil mi
//// $in : belirtilen degerler, bir dizideki degerlerden birisine esit mi
//// $nin: belirtilen degerler, bir dizideki tum degerlere esit degil mi
//// SYNTAX :   {field: {$gte: value} }
////=================================================================

////-----------------------------------------------------------------
//// 13) fiyatı 5000 olan urunleri listeleyiniz.
////-----------------------------------------------------------------
// db.fiyatlar.find({ "fiyat": 5000});
db.fiyatlar.find({ "fiyat": {$eq: 5000}});

////-----------------------------------------------------------------
//// 14) fiyatı 3500'e esit veya daha fazla olan urunleri sadece 
////      urunAdi ve fiyatini listeleyiniz
////-----------------------------------------------------------------
use("urunler")
db.fiyatlar.find({"fiyat": {$gte:3500}}, {"urunAdi":1, "fiyat":1,"_id":0});


////-----------------------------------------------------------------
//// 15) fiyatı 4000'e esit veya daha kucuk olan urunlerin SADECE 
////  urunAdini listeleyiniz
////-----------------------------------------------------------------
db.fiyatlar.find({"fiyat": {$lte: 4000}} , {"urunAdi":1, "_id":0});

////-----------------------------------------------------------------
//// 16) fiyatı 1500 veya 3500 veya 7000 olan urunleri listeleyiniz
////-----------------------------------------------------------------
use("urunler")
db.fiyatlar.find( {"fiyat": {$in:[1500, 3500,7000]}}, {"_id":0});
db.fiyatlar.find( {$or: [{"fiyat": 1500}, {"fiyat": 3500} , {"fiyat": 7000} ]}); 

////-----------------------------------------------------------------
//// 17) fiyatı 1500, 3500 ve 7000 olmayan urunleri listeleyiniz
////-----------------------------------------------------------------
db.fiyatlar.find( {"fiyat": {$nin:[1500, 3500,7000]}}, {"_id":0});

////-----------------------------------------------------------------
//// 18) fiyatı 5000'den kucuk olup urunAdi Utu olmayan urunlerin
//// SADECE urunAdi ve fiyat bilgilerini listeleyiniz
////-----------------------------------------------------------------
use("urunler");
db.fiyatlar.find({"fiyat":{$lt:5000}, "urunAdi":{$ne:"Utu"}}, {"urunAdi":1, "fiyat":1, "_id":0});

////-----------------------------------------------------------------
//// 19) fiyatı 5000'den kucuk olan VEYA urunAdi Koltuk olan urunlerin
//// SADECE urunAdi ve fiyat bilgilerini listeleyiniz
////-----------------------------------------------------------------
db.fiyatlar.find({$or: [{ "fiyat": {$lt:5000} },{"urunAdi":"Koltuk"}] },  {"urunAdi":1, "fiyat": 1, "_id":0});
//************************************************* 
//                    FARKLI BİR YER

////-----------------------------------------------------------------
//// 20) urunlerin tamamini SADECE urunAdini gosterecek sekilde  
////     fiyatlarina gore artan sirada listeleyiniz.
////-----------------------------------------------------------------
// 1 : artan , -1: azalan ...projection 2. sırada yazılacağı için, query (filtre) istemiyorsak bile boş süslü
use("urunler");
 db.fiyatlar.find({},{"urunAdi":1,"_id":0}).sort({"fiyat": 1});  
////tek başına project sort olunca böyle kullanılır, aggregate içinde $sort, $project... 


////-----------------------------------------------------------------
//// 21) urunlerin tamamini SADECE urunAdini gosterecek sekilde  
////     fiyatlarina gore azalan sirada listeleyiniz.
////-----------------------------------------------------------------
// 1 : artan , -1: azalan 
use("URUNLER")
 db.fiyatlar.find({},{"urunAdi":1,"_id":0}).sort({"fiyat": -1});  


////-----------------------------------------------------------------
//// 22) fiyati 5000 olan urunleri, urunAdi'na gore siralayarak (A-Z)
//// listeleyiniz.
//extra eleman ekle, fiyatı 5000 olan.
////-----------------------------------------------------------------
// 1 : A-Z, -1: Z-A ( ASCII formatina gore siralama yapar)
db.fiyatlar.find({"fiyat": 5000},{"_id":0}).sort({"urunAdi": 1});
//soruyu çöz shellde de göster

//text arama ***********
db.createCollection("articles");
db.articles.createIndex( { subject: "text" } )
db.articles.insert(
   [
     { _id: 1, subject: "coffee", author: "xyz", views: 50 },
     { _id: 2, subject: "Coffee Shopping", author: "efg", views: 5 },
     { _id: 3, subject: "Baking a cake", author: "abc", views: 90  },
     { _id: 4, subject: "baking", author: "xyz", views: 100 },
     { _id: 5, subject: "Café Con Leche", author: "abc", views: 200 },
     { _id: 6, subject: "Сырники", author: "jkl", views: 80 },
     { _id: 7, subject: "coffee and cream", author: "efg", views: 10 },
     { _id: 8, subject: "Cafe con Leche", author: "xyz", views: 10 }
   ]
)


db.articles.find( { $text: { $search: "coffee" } } )

// ödev
// hastane database, hastalar, doktorlar collections oluştur. ad,soyad, doktorsa maaş ve uzmanlığı, hastaysa hastalığı gir (çoklu veri girişi ile). maası sundan büyük olan veya uzmanlığı .......olan doktorları, maası ........olanları listele,en yüksek 3 ü seç, hastaları alfabetik sırala